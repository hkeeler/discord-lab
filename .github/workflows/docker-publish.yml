name: Docker

on:
  schedule:
    - cron: '45 13 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_DEPLOY_NOTIFICATIONS_WEBHOOK }}
  GIT_SHA_LINK_MD: "[`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Notify job start
        uses: Ilshidur/action-discord@master
        with:
          args: ':hammer: Rollem deployment for ${{ env.GIT_SHA_LINK_MD }} starting...'
    
      - name: Checkout repository
        uses: actions/checkout@v4

      ## Install the cosign tool except on PR
      ## https://github.com/sigstore/cosign-installer
      #- name: Install cosign
      #  if: github.event_name != 'pull_request'
      #  uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
      #  with:
      #    cosign-release: 'v2.2.4'

      ## Set up BuildKit Docker container builder to be able to build
      ## multi-platform images and export cache
      ## https://github.com/docker/setup-buildx-action
      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      ## Extract metadata (tags, labels) for Docker
      ## https://github.com/docker/metadata-action
      #- name: Extract Docker metadata
      #  id: meta
      #  uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
      #  with:
      #    images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      ## Build and push Docker image with Buildx (don't push on PR)
      ## https://github.com/docker/build-push-action
      #- name: Build and push Docker image
      #  id: build-and-push
      #  uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
      #  with:
      #    context: .
      #    push: ${{ github.event_name != 'pull_request' }}
      #    tags: ${{ steps.meta.outputs.tags }}
      #    #labels: ${{ steps.meta.outputs.labels }}
      #    cache-from: type=gha
      #    cache-to: type=gha,mode=max

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy AWS Resources
        env:
          DISCORD_APP_ID: ${{ secrets.DISCORD_APP_ID }}
          DISCORD_APP_PUBLIC_KEY: ${{ secrets.DISCORD_APP_PUBLIC_KEY }}
          DISCORD_APP_BOT_AUTH_TOKEN: ${{ secrets.DISCORD_APP_BOT_AUTH_TOKEN }}
          DISCORD_OAUTH2_CLIENT_SECRET: ${{ secrets.DISCORD_OAUTH2_CLIENT_SECRET }}
          IMAGE_URI: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
        run: |
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          aws lambda update-function-configuration --function-name discord-lab --environment "Variables={DISCORD_APP_ID=$DISCORD_APP_ID,DISCORD_APP_PUBLIC_KEY=$DISCORD_APP_PUBLIC_KEY,DISCORD_APP_BOT_AUTH_TOKEN=$DISCORD_APP_BOT_AUTH_TOKEN,DISCORD_OAUTH2_CLIENT_SECRET=$DISCORD_OAUTH2_CLIENT_SECRET}"
          aws lambda wait function-updated-v2 --function-name discord-lab
          aws lambda update-function-code --function-name discord-lab --image-uri $IMAGE_URI
          aws lambda wait function-updated-v2 --function-name discord-lab

      - name: Notify job success
        uses: Ilshidur/action-discord@master
        if: success()
        with:
          args: ':white_check_mark: Rollem deployment for ${{ env.GIT_SHA_LINK_MD }} complete.'

      - name: Notify job failure
        uses: Ilshidur/action-discord@master
        if: failure()
        with:
          args: ':x: Rollem deployment for ${{ env.GIT_SHA_LINK_MD }} FAILED!'
